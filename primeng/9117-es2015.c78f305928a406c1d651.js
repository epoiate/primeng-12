(self.webpackChunkprimeng=self.webpackChunkprimeng||[]).push([[9117],{79117:function(e,t,n){"use strict";n.r(t),n.d(t,{TreeDemoModule:function(){return W}});var i=n(61116),o=n(11462),r=n(42066),a=n(87368),l=n(70203),d=n(12774),s=n(30844),p=n(59766),c=n(47299),Z=n(90628),g=n(74136);function u(e,t){1&e&&a._UZ(0,"iframe",22)}const h=function(){return["/theming"]};let T=(()=>{class e{constructor(e){this.nodeService=e}ngOnInit(){this.nodeService.getFiles().then(e=>this.files1=e),this.nodeService.getFiles().then(e=>this.files2=e)}expandAll(){this.files2.forEach(e=>{this.expandRecursive(e,!0)})}collapseAll(){this.files2.forEach(e=>{this.expandRecursive(e,!1)})}expandRecursive(e,t){e.expanded=t,e.children&&e.children.forEach(e=>{this.expandRecursive(e,t)})}}return e.\u0275fac=function(t){return new(t||e)(a.Y36(l.s))},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],decls:940,vars:4,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","tree-demo"],[1,"content-section","implementation"],[1,"card"],[3,"value"],[2,"margin-bottom","1rem"],["pButton","","type","button","label","Expand all",2,"margin-right",".5rem",3,"click"],["pButton","","type","button","label","Collapse all",3,"click"],[1,"content-section","documentation"],["header","Documentation"],["lang","markup"],["lang","typescript"],[1,"doc-tablewrapper"],[1,"doc-table"],["href","https://github.com/primefaces/primeng/issues/7237#issue-409791407","target","_blank","rel","noopener noreferrer"],["href","#",3,"routerLink"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-tree-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["header","StackBlitz"],["pTemplate","content"],["src","https://stackblitz.com/edit/primeng-tree-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){if(1&e){a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree"),a.qZA(),a.TgZ(4,"p"),a._uU(5,"Tree is used to display hierarchical data."),a.qZA(),a.qZA(),a._UZ(6,"app-demoActions",2),a.qZA(),a.TgZ(7,"div",3),a.TgZ(8,"div",4),a.TgZ(9,"h5"),a._uU(10,"Basic"),a.qZA(),a._UZ(11,"p-tree",5),a.TgZ(12,"h5"),a._uU(13,"Programmatic"),a.qZA(),a.TgZ(14,"div",6),a.TgZ(15,"button",7),a.NdJ("click",function(){return t.expandAll()}),a.qZA(),a.TgZ(16,"button",8),a.NdJ("click",function(){return t.collapseAll()}),a.qZA(),a.qZA(),a._UZ(17,"p-tree",5),a.qZA(),a.qZA(),a.TgZ(18,"div",9),a.TgZ(19,"p-tabView"),a.TgZ(20,"p-tabPanel",10),a.TgZ(21,"h5"),a._uU(22,"CDK"),a.qZA(),a.TgZ(23,"p"),a._uU(24,"VirtualScrolling depends on @angular/cdk's ScrollingModule so begin with installing CDK if not already installed."),a.qZA(),a.TgZ(25,"app-code",11),a.IAx(),a._uU(26,"\nnpm install @angular/cdk --save\n"),a.fQ9(),a.qZA(),a.TgZ(27,"h5"),a._uU(28,"Import"),a.qZA(),a.TgZ(29,"app-code",12),a.IAx(),a._uU(30,"\nimport {TreeModule} from 'primeng/tree';\nimport {TreeNode} from 'primeng/api';\n"),a.fQ9(),a.qZA(),a.TgZ(31,"h5"),a._uU(32,"Getting Started"),a.qZA(),a.TgZ(33,"p"),a._uU(34,"Tree component requires an array of TreeNode objects as its value. Let's begin with the TreeNode api. Note that all of the properties are optional."),a.qZA(),a.TgZ(35,"div",13),a.TgZ(36,"table",14),a.TgZ(37,"thead"),a.TgZ(38,"tr"),a.TgZ(39,"th"),a._uU(40,"Name"),a.qZA(),a.TgZ(41,"th"),a._uU(42,"Type"),a.qZA(),a.TgZ(43,"th"),a._uU(44,"Default"),a.qZA(),a.TgZ(45,"th"),a._uU(46,"Description"),a.qZA(),a.qZA(),a.qZA(),a.TgZ(47,"tbody"),a.TgZ(48,"tr"),a.TgZ(49,"td"),a._uU(50,"label"),a.qZA(),a.TgZ(51,"td"),a._uU(52,"string"),a.qZA(),a.TgZ(53,"td"),a._uU(54,"null"),a.qZA(),a.TgZ(55,"td"),a._uU(56,"Label of the node."),a.qZA(),a.qZA(),a.TgZ(57,"tr"),a.TgZ(58,"td"),a._uU(59,"data"),a.qZA(),a.TgZ(60,"td"),a._uU(61,"any"),a.qZA(),a.TgZ(62,"td"),a._uU(63,"null"),a.qZA(),a.TgZ(64,"td"),a._uU(65,"Data represented by the node."),a.qZA(),a.qZA(),a.TgZ(66,"tr"),a.TgZ(67,"td"),a._uU(68,"icon"),a.qZA(),a.TgZ(69,"td"),a._uU(70,"string"),a.qZA(),a.TgZ(71,"td"),a._uU(72,"null"),a.qZA(),a.TgZ(73,"td"),a._uU(74,"Icon of the node to display next to content."),a.qZA(),a.qZA(),a.TgZ(75,"tr"),a.TgZ(76,"td"),a._uU(77,"expandedIcon"),a.qZA(),a.TgZ(78,"td"),a._uU(79,"string"),a.qZA(),a.TgZ(80,"td"),a._uU(81,"null"),a.qZA(),a.TgZ(82,"td"),a._uU(83,"Icon to use in expanded state."),a.qZA(),a.qZA(),a.TgZ(84,"tr"),a.TgZ(85,"td"),a._uU(86,"collapsedIcon"),a.qZA(),a.TgZ(87,"td"),a._uU(88,"string"),a.qZA(),a.TgZ(89,"td"),a._uU(90,"null"),a.qZA(),a.TgZ(91,"td"),a._uU(92,"Icon to use in collapsed state."),a.qZA(),a.qZA(),a.TgZ(93,"tr"),a.TgZ(94,"td"),a._uU(95,"children"),a.qZA(),a.TgZ(96,"td"),a._uU(97,"TreeNode[]"),a.qZA(),a.TgZ(98,"td"),a._uU(99,"null"),a.qZA(),a.TgZ(100,"td"),a._uU(101,"An array of treenodes as children."),a.qZA(),a.qZA(),a.TgZ(102,"tr"),a.TgZ(103,"td"),a._uU(104,"leaf"),a.qZA(),a.TgZ(105,"td"),a._uU(106,"boolean"),a.qZA(),a.TgZ(107,"td"),a._uU(108,"null"),a.qZA(),a.TgZ(109,"td"),a._uU(110,"Specifies if the node has children. Used in lazy loading."),a.qZA(),a.qZA(),a.TgZ(111,"tr"),a.TgZ(112,"td"),a._uU(113,"style"),a.qZA(),a.TgZ(114,"td"),a._uU(115,"string"),a.qZA(),a.TgZ(116,"td"),a._uU(117,"null"),a.qZA(),a.TgZ(118,"td"),a._uU(119,"Inline style of the node."),a.qZA(),a.qZA(),a.TgZ(120,"tr"),a.TgZ(121,"td"),a._uU(122,"styleClass"),a.qZA(),a.TgZ(123,"td"),a._uU(124,"string"),a.qZA(),a.TgZ(125,"td"),a._uU(126,"null"),a.qZA(),a.TgZ(127,"td"),a._uU(128,"Style class of the node."),a.qZA(),a.qZA(),a.TgZ(129,"tr"),a.TgZ(130,"td"),a._uU(131,"expanded"),a.qZA(),a.TgZ(132,"td"),a._uU(133,"boolean"),a.qZA(),a.TgZ(134,"td"),a._uU(135,"null"),a.qZA(),a.TgZ(136,"td"),a._uU(137,"Whether the node is in an expanded or collapsed state."),a.qZA(),a.qZA(),a.TgZ(138,"tr"),a.TgZ(139,"td"),a._uU(140,"type"),a.qZA(),a.TgZ(141,"td"),a._uU(142,"string"),a.qZA(),a.TgZ(143,"td"),a._uU(144,"null"),a.qZA(),a.TgZ(145,"td"),a._uU(146,"Type of the node to match ng-template type."),a.qZA(),a.qZA(),a.TgZ(147,"tr"),a.TgZ(148,"td"),a._uU(149,"parent"),a.qZA(),a.TgZ(150,"td"),a._uU(151,"TreeNode"),a.qZA(),a.TgZ(152,"td"),a._uU(153,"null"),a.qZA(),a.TgZ(154,"td"),a._uU(155,"Parent of the node."),a.qZA(),a.qZA(),a.TgZ(156,"tr"),a.TgZ(157,"td"),a._uU(158,"draggable"),a.qZA(),a.TgZ(159,"td"),a._uU(160,"boolean"),a.qZA(),a.TgZ(161,"td"),a._uU(162,"null"),a.qZA(),a.TgZ(163,"td"),a._uU(164,"Whether to disable dragging for a particular node even if draggableNodes is enabled."),a.qZA(),a.qZA(),a.TgZ(165,"tr"),a.TgZ(166,"td"),a._uU(167,"droppable"),a.qZA(),a.TgZ(168,"td"),a._uU(169,"boolean"),a.qZA(),a.TgZ(170,"td"),a._uU(171,"null"),a.qZA(),a.TgZ(172,"td"),a._uU(173,"Whether to disable dropping for a particular node even if droppableNodes is enabled."),a.qZA(),a.qZA(),a.TgZ(174,"tr"),a.TgZ(175,"td"),a._uU(176,"selectable"),a.qZA(),a.TgZ(177,"td"),a._uU(178,"boolean"),a.qZA(),a.TgZ(179,"td"),a._uU(180,"null"),a.qZA(),a.TgZ(181,"td"),a._uU(182,"Used to disable selection of a particular node."),a.qZA(),a.qZA(),a.TgZ(183,"tr"),a.TgZ(184,"td"),a._uU(185,"key"),a.qZA(),a.TgZ(186,"td"),a._uU(187,"string"),a.qZA(),a.TgZ(188,"td"),a._uU(189,"null"),a.qZA(),a.TgZ(190,"td"),a._uU(191,"Unique key of the node.("),a.TgZ(192,"a",15),a._uU(193,"more"),a.qZA(),a._uU(194,")"),a.qZA(),a.qZA(),a.TgZ(195,"tr"),a.TgZ(196,"td"),a._uU(197,"emptyMessage"),a.qZA(),a.TgZ(198,"td"),a._uU(199,"string"),a.qZA(),a.TgZ(200,"td"),a._uU(201,"No records found."),a.qZA(),a.TgZ(202,"td"),a._uU(203,"Text to display when there is no data. Defaults to global value in i18n translation configuration."),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.TgZ(204,"p"),a._uU(205,"Most of the time, nodes will be loaded from a remote datasoure, here is an example NodeService that fetches the data from a json file."),a.qZA(),a.TgZ(206,"app-code",12),a.IAx(),a._uU(207,"\n@Injectable()\nexport class NodeService {\n\n    constructor(private http: Http) {}\n\n    getFiles() {\n        return this.http.get('showcase/resources/data/files.json')\n                    .toPromise()\n                    .then(res => <TreeNode[]> res.json().data);\n    }\n}\n"),a.fQ9(),a.qZA(),a.TgZ(208,"p"),a._uU(209,"The files.json file consists of sample data. In a real application, this should be a dynamic response generated from the remote call."),a.qZA(),a.TgZ(210,"app-code",12),a.IAx(),a._uU(211,'\n{\n    "data":\n    [\n        {\n            "label": "Documents",\n            "data": "Documents Folder",\n            "expandedIcon": "pi pi-folder-open",\n            "collapsedIcon": "pi pi-folder",\n            "children": [{\n                    "label": "Work",\n                    "data": "Work Folder",\n                    "expandedIcon": "pi pi-folder-open",\n                    "collapsedIcon": "pi pi-folder",\n                    "children": [{"label": "Expenses.doc", "icon": "pi pi-file", "data": "Expenses Document"}, {"label": "Resume.doc", "icon": "pi pi-file", "data": "Resume Document"}]\n                },\n                {\n                    "label": "Home",\n                    "data": "Home Folder",\n                    "expandedIcon": "pi pi-folder-open",\n                    "collapsedIcon": "pi pi-folder",\n                    "children": [{"label": "Invoices.txt", "icon": "pi pi-file", "data": "Invoices for this month"}]\n                }]\n        },\n        {\n            "label": "Pictures",\n            "data": "Pictures Folder",\n            "expandedIcon": "pi pi-folder-open",\n            "collapsedIcon": "pi pi-folder",\n            "children": [\n                {"label": "barcelona.jpg", "icon": "pi pi-image", "data": "Barcelona Photo"},\n                {"label": "logo.jpg", "icon": "pi pi-file", "data": "PrimeFaces Logo"},\n                {"label": "primeui.png", "icon": "pi pi-image", "data": "PrimeUI Logo"}]\n        },\n        {\n            "label": "Movies",\n            "data": "Movies Folder",\n            "expandedIcon": "pi pi-folder-open",\n            "collapsedIcon": "pi pi-folder",\n            "children": [{\n                    "label": "Al Pacino",\n                    "data": "Pacino Movies",\n                    "children": [{"label": "Scarface", "icon": "pi pi-video", "data": "Scarface Movie"}, {"label": "Serpico", "icon": "pi pi-file-video", "data": "Serpico Movie"}]\n                },\n                {\n                    "label": "Robert De Niro",\n                    "data": "De Niro Movies",\n                    "children": [{"label": "Goodfellas", "icon": "pi pi-video", "data": "Goodfellas Movie"}, {"label": "Untouchables", "icon": "pi pi-video", "data": "Untouchables Movie"}]\n                }]\n        }\n    ]\n}\n'),a.fQ9(),a.qZA(),a.TgZ(212,"p"),a._uU(213,"The component that uses this service makes a call to getFiles() and assigns them back to files property that is bound to the tree."),a.qZA(),a.TgZ(214,"app-code",12),a.IAx(),a._uU(215,"\nexport class TreeDemoComponent implements OnInit {\n\n    files: TreeNode[];\n\n    constructor(private nodeService: NodeService) {}\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files = files);\n    }\n\n}\n"),a.fQ9(),a.qZA(),a.TgZ(216,"app-code",11),a.IAx(),a._uU(217,'\n<p-tree [value]="files"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(218,"h5"),a._uU(219,"Selection"),a.qZA(),a.TgZ(220,"p"),a._uU(221,"Tree supports 3 selection methods, single, multiple and checkbox. Selection is enabled by setting "),a.TgZ(222,"i"),a._uU(223,"selectionMode"),a.qZA(),a._uU(224," property and providing a single TreeNode or an array of TreeNodes to reference the selections depending on the selection mode."),a.qZA(),a.TgZ(225,"app-code",12),a.IAx(),a._uU(226,"\nexport class TreeDemoComponent implements OnInit {\n\n    files: TreeNode[];\n\n    selectedFile: TreeNode;\n\n    constructor(private nodeService: NodeService) {}\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files = files);\n    }\n\n}\n"),a.fQ9(),a.qZA(),a.TgZ(227,"app-code",11),a.IAx(),a._uU(228,'\n<p-tree [value]="files" selectionMode="single" [(selection)]="selectedFile"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(229,"p"),a._uU(230,"In multiple mode or checkbox mode, selection property should be an array. In multiple mode, items can either be selected using metaKey or toggled individually depending on the value of metaKeySelection property value which is true by default. On touch enabled devices metaKeySelection is turned off automatically. In checkbox mode, when inititing a tree with preselections, also set partialSelected property on node so that minus icon can be displayed when necessary."),a.qZA(),a.TgZ(231,"app-code",12),a.IAx(),a._uU(232,"\n    export class TreeDemoComponent implements OnInit {\n\n        files: TreeNode[];\n\n        selectedFiles: TreeNode[];\n\n        constructor(private nodeService: NodeService) {}\n\n        ngOnInit() {\n            this.nodeService.getFiles().then(files => this.files = files);\n        }\n\n    }\n"),a.fQ9(),a.qZA(),a.TgZ(233,"app-code",11),a.IAx(),a._uU(234,'\n<p-tree [value]="files" selectionMode="single" [(selection)]="selectedFiles"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(235,"p"),a._uU(236,"In checkbox mode, selections propagate up and down, if you prefer not to do so, propagation can be turned off by "),a.TgZ(237,"i"),a._uU(238,"propagateSelectionDown"),a.qZA(),a._uU(239," and "),a.TgZ(240,"i"),a._uU(241,"propagateSelectionUp"),a.qZA(),a._uU(242," properties."),a.qZA(),a.TgZ(243,"app-code",11),a.IAx(),a._uU(244,'\n<p-tree [value]="files" selectionMode="checkbox" [(selection)]="selectedFiles"\n                [propagateSelectionUp]="false" [propagateSelectionDown]="false"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(245,"p"),a._uU(246,"Tree provides "),a.TgZ(247,"i"),a._uU(248,"onNodeSelect"),a.qZA(),a._uU(249," and "),a.TgZ(250,"i"),a._uU(251,"onNodeUnselect"),a.qZA(),a._uU(252," options as callbacks for selection feature."),a.qZA(),a.TgZ(253,"app-code",11),a.IAx(),a._uU(254,'\n<p-tree [value]="files" selectionMode="single" [(selection)]="selectedFiles" (onNodeSelect)="nodeSelect($event)" (onNodeUnselect)="nodeUnselect($event)"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(255,"app-code",12),a.IAx(),a._uU(256,"\nexport class TreeDemoComponent implements OnInit {\n\n    files: TreeNode[];\n\n    selectedFiles: TreeNode[];\n\n    constructor(private nodeService: NodeService) {}\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files = files);\n    }\n\n    nodeSelect(event) {\n        //event.node = selected node\n    }\n\n}\n"),a.fQ9(),a.qZA(),a.TgZ(257,"p"),a._uU(258,"Selection of a particular node can be disabled by setting the "),a.TgZ(259,"i"),a._uU(260,"selectable"),a.qZA(),a._uU(261," property of the node to false."),a.qZA(),a.TgZ(262,"h5"),a._uU(263,"Icons"),a.qZA(),a.TgZ(264,"p"),a._uU(265,"Icon of a treenode is defined using the icon property, if you need an icon depending on the expand or collapse state, use "),a.TgZ(266,"i"),a._uU(267,"expandedIcon"),a.qZA(),a._uU(268," and "),a.TgZ(269,"i"),a._uU(270,"collapsedIcon"),a.qZA(),a._uU(271," instead."),a.qZA(),a.TgZ(272,"h5"),a._uU(273,"Sections"),a.qZA(),a.TgZ(274,"p"),a._uU(275,"Sections can be customized using "),a.TgZ(276,"i"),a._uU(277,"header"),a.qZA(),a._uU(278,", "),a.TgZ(279,"i"),a._uU(280,"footer"),a.qZA(),a._uU(281," and "),a.TgZ(282,"i"),a._uU(283,"empty"),a.qZA(),a._uU(284," templates."),a.qZA(),a.TgZ(285,"app-code",11),a.IAx(),a._uU(286,'\n<p-tree [value]="files">\n    <ng-template pTemplate="header">\n        Header Content\n    </ng-template>\n    <ng-template pTemplate="empty">\n        No records found\n    </ng-template>\n    <ng-template pTemplate="footer">\n        Footer Content\n    </ng-template>\n</p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(287,"h5"),a._uU(288,"Templating"),a.qZA(),a.TgZ(289,"p"),a._uU(290,"By default label of a treenode is displayed inside a tree node, in case you need to place custom content define a pTemplate that gets the treenode as an implicit variable. Example below places an input field to create editable treenodes."),a.qZA(),a.TgZ(291,"app-code",11),a.IAx(),a._uU(292,'\n<p-tree [value]="files">\n    <ng-template let-node  pTemplate="default">\n        <input [(ngModel)]="node.label" type="text" style="width:100%">\n    </ng-template>\n</p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(293,"p"),a._uU(294,"Multiple templates are supported by matching the type property of the TreeNode with the type of pTemplate. If a node has no type, then default "),a.TgZ(295,"i"),a._uU(296,"ng-template"),a.qZA(),a._uU(297," is used."),a.qZA(),a.TgZ(298,"app-code",11),a.IAx(),a._uU(299,'\n<p-tree [value]="files">\n    <ng-template let-node  pTemplate="picture">\n        <img [attrs.src]="picture.path">\n    </ng-template>\n    <ng-template let-node  pTemplate="default">\n        <input [(ngModel)]="node.label" type="text" style="width:100%">\n    </ng-template>\n</p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(300,"h5"),a._uU(301,"Filtering"),a.qZA(),a.TgZ(302,"p"),a._uU(303,"Filtering is enabled by setting the "),a.TgZ(304,"i"),a._uU(305,"filter"),a.qZA(),a._uU(306," property to true, by default label property of a node is used to compare against the value in the text field, in order to customize which field(s) should be used during search define "),a.TgZ(307,"i"),a._uU(308,"filterBy"),a.qZA(),a._uU(309," property."),a.qZA(),a.TgZ(310,"p"),a._uU(311,"In addition "),a.TgZ(312,"i"),a._uU(313,"filterMode"),a.qZA(),a._uU(314," specifies the filtering strategy. In "),a.TgZ(315,"b"),a._uU(316,"lenient"),a.qZA(),a._uU(317," mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand, in "),a.TgZ(318,"b"),a._uU(319,"strict"),a.qZA(),a._uU(320," mode when the query matches a node, filtering continues on all descendants."),a.qZA(),a.TgZ(321,"app-code",11),a.IAx(),a._uU(322,'\n<p-tree [value]="filesTree11" [filter]="true"></p-tree>\n\n<p-tree [value]="filesTree12" [filter]="true" filterMode="strict"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(323,"h5"),a._uU(324,"ContextMenu"),a.qZA(),a.TgZ(325,"p"),a._uU(326,"Tree has exclusive integration with context menu created by binding a menu instance to the tree."),a.qZA(),a.TgZ(327,"app-code",11),a.IAx(),a._uU(328,'\n<p-tree [value]="files" selectionMode="single" [(selection)]="selectedFile2" [contextMenu]="cm"></p-tree>\n\n<p-contextMenu #cm [model]="items"></p-contextMenu>\n'),a.fQ9(),a.qZA(),a.TgZ(329,"h5"),a._uU(330,"Lazy Loading"),a.qZA(),a.TgZ(331,"p"),a._uU(332,"Lazy loading is handy to deal with large datasets. Instead of loading the whole tree, nodes can be loaded at "),a.TgZ(333,"i"),a._uU(334,"onNodeExpand"),a.qZA(),a._uU(335," event. Important part of implementing lazy loading is defining leaf property of a node as false, this will instruct tree to display an arrow icon to indicate there are children of this node although they are not loaded yet. When the lazy node is expanded, onNodeExpand is called and a remote call can be made to add the children to the expanded node."),a.qZA(),a.TgZ(336,"app-code",11),a.IAx(),a._uU(337,'\n<p-tree [value]="files" (onNodeExpand)="loadNode($event)"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(338,"app-code",12),a.IAx(),a._uU(339,"\nexport class TreeDemoComponent implements OnInit {\n\n    files: TreeNode[];\n\n    selectedFiles: TreeNode[];\n\n    constructor(private nodeService: NodeService) {}\n\n    ngOnInit() {\n        //initial nodes\n        this.nodeService.getFiles().then(files => this.files = files);\n    }\n\n    loadNode(event) {\n        if (event.node) {\n            //in a real application, make a call to a remote url to load children of the current node and add the new nodes as children\n            this.nodeService.getLazyFiles().then(nodes => event.node.children = nodes);\n        }\n    }\n\n}\n"),a.fQ9(),a.qZA(),a.TgZ(340,"p"),a._uU(341,"Assume at ngOnInit tree is initialized with a data like below that has nodes having no actual children but leaf property is set false."),a.qZA(),a.TgZ(342,"app-code",12),a.IAx(),a._uU(343,'\n{\n    "data":\n    [\n        {\n            "label": "Lazy Node 0",\n            "data": "Node 0",\n            "expandedIcon": "pi pi-folder",\n            "collapsedIcon": "pi pi-folder",\n            "leaf": false\n        },\n        {\n            "label": "Lazy Node 1",\n            "data": "Node 1",\n            "expandedIcon": "pi pi-folder-open",\n            "collapsedIcon": "pi pi-folder",\n            "leaf": false\n        },\n        {\n            "label": "Lazy Node 1",\n            "data": "Node 2",\n            "expandedIcon": "pi pi-folder-open",\n            "collapsedIcon": "pi pi-folder",\n            "leaf": false\n        }\n    ]\n}\n'),a.fQ9(),a.qZA(),a.TgZ(344,"h5"),a._uU(345,"Scrolling"),a.qZA(),a.TgZ(346,"p"),a._uU(347,"Scrolling is used to preserve space as content of the tree is dynamic and enabled by "),a.TgZ(348,"i"),a._uU(349,"scrollHeight"),a.qZA(),a._uU(350," property."),a.qZA(),a.TgZ(351,"app-code",11),a.IAx(),a._uU(352,'\n<p-tree [value]="files" scrollHeight="200px"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(353,"h5"),a._uU(354,"Flex Scroll"),a.qZA(),a.TgZ(355,"p"),a._uU(356,"In cases where viewport should adjust itself according to the table parent's height instead of a fixed viewport height, set "),a.TgZ(357,"i"),a._uU(358,"scrollHeight"),a.qZA(),a._uU(359," option as "),a.TgZ(360,"b"),a._uU(361,"flex"),a.qZA(),a._uU(362,". In example below, table is inside a Dialog where viewport size dynamically responds to the dialog size changes such as resizing or maximizing."),a.qZA(),a.TgZ(363,"app-code",11),a.IAx(),a._uU(364,'\n<button type="button" (click)="showDialog()" pButton icon="pi pi-external-link" label="View"></button>\n<p-dialog header="Flexible ScrollHeight" [(visible)]="dialogVisible" [style]="{width: \'50vw\'}" [baseZIndex]="10000" [maximizable]="true" [modal]="true"\n    [resizable]="true" [contentStyle]="{height: \'300px\'}" styleClass="p-fluid">\n    <p-tree [value]="files2" scrollHeight="flex"></p-tree>\n</p-dialog>\n'),a.fQ9(),a.qZA(),a.TgZ(365,"h5"),a._uU(366,"Virtual Scrolling"),a.qZA(),a.TgZ(367,"p"),a._uU(368,"VirtualScroller is a performant approach to handle huge data efficiently. Setting "),a.TgZ(369,"i"),a._uU(370,"virtualScroll"),a.qZA(),a._uU(371," property as true and providing a "),a.TgZ(372,"i"),a._uU(373,"virtualNodeHeight"),a.qZA(),a._uU(374," in pixels would be enough to enable this functionality."),a.qZA(),a.TgZ(375,"app-code",11),a.IAx(),a._uU(376,'\n<p-tree [value]="files" [virtualScroll]="true" [virtualNodeHeight]="33" scrollHeight="200px"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(377,"h5"),a._uU(378,"Drag and Drop"),a.qZA(),a.TgZ(379,"p"),a._uU(380,"Nodes can be reordered within a tree and also can be transferred between multiple trees. To enable dragging from a tree set "),a.TgZ(381,"i"),a._uU(382,"draggableNodes"),a.qZA(),a._uU(383," to true and to allow dropping enable "),a.TgZ(384,"i"),a._uU(385,"droppableNodes"),a.qZA(),a._uU(386," property. In addition, import TreeDragDropService and configure it as a provider at your component or module."),a.qZA(),a.TgZ(387,"app-code",12),a.IAx(),a._uU(388,"\nimport {TreeDragDropService} from 'primeng/api';\n"),a.fQ9(),a.qZA(),a.TgZ(389,"app-code",11),a.IAx(),a._uU(390,'\n<p-tree [value]="files" draggableNodes="true" droppableNodes="true"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(391,"p"),a._uU(392,"Multiple trees can be used in a drag drop operation, in order to add constraints like rejecting drags from a certain tree but allow from another use draggableScope and droppableScope properties which can be a string or an array. Following example uses 3 trees where second one only accepts drags from first tree and second one only accepts from second tree whereas first tree accepts drops from 3rd tree."),a.qZA(),a.TgZ(393,"app-code",11),a.IAx(),a._uU(394,'\n<p-tree [value]="files" draggableNodes="true" droppableNodes="true" draggableScope="a" droppableScope="c"></p-tree>\n<p-tree [value]="files" draggableNodes="true" droppableNodes="true" draggableScope="b" droppableScope="a"></p-tree>\n<p-tree [value]="files" draggableNodes="true" droppableNodes="true" draggableScope="c" droppableScope="b"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(395,"p"),a._uU(396,"In case, a drop should be accepted based on a condition, enable validateDrop property, define an event handler for "),a.TgZ(397,"i"),a._uU(398,"onNodeDrop"),a.qZA(),a._uU(399," where the passed event and call the accept callback of the event to accept a drop. Simply emitting the call of "),a.TgZ(400,"i"),a._uU(401,"accept()"),a.qZA(),a._uU(402," will reject the drop. "),a.qZA(),a.TgZ(403,"app-code",11),a.IAx(),a._uU(404,'\n<p-tree [value]="files" draggableNodes="true" droppableNodes="true" [validateDrop]="true" (onNodeDrop)="onDrop($event)"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(405,"app-code",12),a.IAx(),a._uU(406,"\nonDrop(event) {\n    if (condition) {\n        event.accept();\n    }\n}\n"),a.fQ9(),a.qZA(),a.TgZ(407,"h5"),a._uU(408,"Loading Status"),a.qZA(),a.TgZ(409,"p"),a._uU(410,"Tree has a loading property, when enabled a spinner icon is displayed to indicate data load."),a.qZA(),a.TgZ(411,"p"),a._uU(412,"An optional loadingIcon property can be passed in case you prefer a different icon."),a.qZA(),a.TgZ(413,"app-code",11),a.IAx(),a._uU(414,'\n<p-tree [value]="files" [loading]="loading"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(415,"h5"),a._uU(416,"Horizontal Orientation"),a.qZA(),a.TgZ(417,"p"),a._uU(418,"Horizontal mode is the alternative option for orientation."),a.qZA(),a.TgZ(419,"app-code",11),a.IAx(),a._uU(420,'\n<p-tree [value]="files" layout="horizontal"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(421,"h5"),a._uU(422,"Properties"),a.qZA(),a.TgZ(423,"div",13),a.TgZ(424,"table",14),a.TgZ(425,"thead"),a.TgZ(426,"tr"),a.TgZ(427,"th"),a._uU(428,"Name"),a.qZA(),a.TgZ(429,"th"),a._uU(430,"Type"),a.qZA(),a.TgZ(431,"th"),a._uU(432,"Default"),a.qZA(),a.TgZ(433,"th"),a._uU(434,"Description"),a.qZA(),a.qZA(),a.qZA(),a.TgZ(435,"tbody"),a.TgZ(436,"tr"),a.TgZ(437,"td"),a._uU(438,"value"),a.qZA(),a.TgZ(439,"td"),a._uU(440,"array"),a.qZA(),a.TgZ(441,"td"),a._uU(442,"null"),a.qZA(),a.TgZ(443,"td"),a._uU(444,"An array of treenodes."),a.qZA(),a.qZA(),a.TgZ(445,"tr"),a.TgZ(446,"td"),a._uU(447,"selectionMode"),a.qZA(),a.TgZ(448,"td"),a._uU(449,"string"),a.qZA(),a.TgZ(450,"td"),a._uU(451,"null"),a.qZA(),a.TgZ(452,"td"),a._uU(453,'Defines the selection mode, valid values "single", "multiple", and "checkbox".'),a.qZA(),a.qZA(),a.TgZ(454,"tr"),a.TgZ(455,"td"),a._uU(456,"selection"),a.qZA(),a.TgZ(457,"td"),a._uU(458,"any"),a.qZA(),a.TgZ(459,"td"),a._uU(460,"null"),a.qZA(),a.TgZ(461,"td"),a._uU(462,"A single treenode instance or an array to refer to the selections."),a.qZA(),a.qZA(),a.TgZ(463,"tr"),a.TgZ(464,"td"),a._uU(465,"style"),a.qZA(),a.TgZ(466,"td"),a._uU(467,"string"),a.qZA(),a.TgZ(468,"td"),a._uU(469,"null"),a.qZA(),a.TgZ(470,"td"),a._uU(471,"Inline style of the component."),a.qZA(),a.qZA(),a.TgZ(472,"tr"),a.TgZ(473,"td"),a._uU(474,"styleClass"),a.qZA(),a.TgZ(475,"td"),a._uU(476,"string"),a.qZA(),a.TgZ(477,"td"),a._uU(478,"null"),a.qZA(),a.TgZ(479,"td"),a._uU(480,"Style class of the component."),a.qZA(),a.qZA(),a.TgZ(481,"tr"),a.TgZ(482,"td"),a._uU(483,"contextMenu"),a.qZA(),a.TgZ(484,"td"),a._uU(485,"ContextMenu"),a.qZA(),a.TgZ(486,"td"),a._uU(487,"null"),a.qZA(),a.TgZ(488,"td"),a._uU(489,"Context menu instance."),a.qZA(),a.qZA(),a.TgZ(490,"tr");a.TgZ(491,"td"),a._uU(492,"layout"),a.qZA(),a.TgZ(493,"td"),a._uU(494,"string"),a.qZA(),a.TgZ(495,"td"),a._uU(496,"vertical"),a.qZA(),a.TgZ(497,"td"),a._uU(498,"Defines the orientation of the tree, valid values are 'vertical' and 'horizontal'."),a.qZA(),a.qZA(),a.TgZ(499,"tr"),a.TgZ(500,"td"),a._uU(501,"draggableScope"),a.qZA(),a.TgZ(502,"td"),a._uU(503,"string/array"),a.qZA(),a.TgZ(504,"td"),a._uU(505,"null"),a.qZA(),a.TgZ(506,"td"),a._uU(507,"Scope of the draggable nodes to match a droppableScope."),a.qZA(),a.qZA(),a.TgZ(508,"tr"),a.TgZ(509,"td"),a._uU(510,"droppableScope"),a.qZA(),a.TgZ(511,"td"),a._uU(512,"string/array"),a.qZA(),a.TgZ(513,"td"),a._uU(514,"null"),a.qZA(),a.TgZ(515,"td"),a._uU(516,"Scope of the droppable nodes to match a draggableScope."),a.qZA(),a.qZA(),a.TgZ(517,"tr"),a.TgZ(518,"td"),a._uU(519,"draggableNodes"),a.qZA(),a.TgZ(520,"td"),a._uU(521,"boolean"),a.qZA(),a.TgZ(522,"td"),a._uU(523,"false"),a.qZA(),a.TgZ(524,"td"),a._uU(525,"Whether the nodes are draggable."),a.qZA(),a.qZA(),a.TgZ(526,"tr"),a.TgZ(527,"td"),a._uU(528,"droppableNodes"),a.qZA(),a.TgZ(529,"td"),a._uU(530,"boolean"),a.qZA(),a.TgZ(531,"td"),a._uU(532,"false"),a.qZA(),a.TgZ(533,"td"),a._uU(534,"Whether the nodes are droppable."),a.qZA(),a.qZA(),a.TgZ(535,"tr"),a.TgZ(536,"td"),a._uU(537,"metaKeySelection"),a.qZA(),a.TgZ(538,"td"),a._uU(539,"boolean"),a.qZA(),a.TgZ(540,"td"),a._uU(541,"true"),a.qZA(),a.TgZ(542,"td"),a._uU(543,"Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."),a.qZA(),a.qZA(),a.TgZ(544,"tr"),a.TgZ(545,"td"),a._uU(546,"propagateSelectionUp"),a.qZA(),a.TgZ(547,"td"),a._uU(548,"boolean"),a.qZA(),a.TgZ(549,"td"),a._uU(550,"true"),a.qZA(),a.TgZ(551,"td"),a._uU(552,"Whether checkbox selections propagate to ancestor nodes."),a.qZA(),a.qZA(),a.TgZ(553,"tr"),a.TgZ(554,"td"),a._uU(555,"propagateSelectionDown"),a.qZA(),a.TgZ(556,"td"),a._uU(557,"boolean"),a.qZA(),a.TgZ(558,"td"),a._uU(559,"true"),a.qZA(),a.TgZ(560,"td"),a._uU(561,"Whether checkbox selections propagate to descendant nodes."),a.qZA(),a.qZA(),a.TgZ(562,"tr"),a.TgZ(563,"td"),a._uU(564,"loading"),a.qZA(),a.TgZ(565,"td"),a._uU(566,"boolean"),a.qZA(),a.TgZ(567,"td"),a._uU(568,"false"),a.qZA(),a.TgZ(569,"td"),a._uU(570,"Displays a loader to indicate data load is in progress."),a.qZA(),a.qZA(),a.TgZ(571,"tr"),a.TgZ(572,"td"),a._uU(573,"loadingIcon"),a.qZA(),a.TgZ(574,"td"),a._uU(575,"string"),a.qZA(),a.TgZ(576,"td"),a._uU(577,"pi pi-spinner"),a.qZA(),a.TgZ(578,"td"),a._uU(579,"The icon to show while indicating data load is in progress."),a.qZA(),a.qZA(),a.TgZ(580,"tr"),a.TgZ(581,"td"),a._uU(582,"emptyMessage"),a.qZA(),a.TgZ(583,"td"),a._uU(584,"string"),a.qZA(),a.TgZ(585,"td"),a._uU(586,"No records found"),a.qZA(),a.TgZ(587,"td"),a._uU(588,"Text to display when there is no data."),a.qZA(),a.qZA(),a.TgZ(589,"tr"),a.TgZ(590,"td"),a._uU(591,"ariaLabel"),a.qZA(),a.TgZ(592,"td"),a._uU(593,"string"),a.qZA(),a._UZ(594,"td"),a.TgZ(595,"td"),a._uU(596,"Used to define a string that labels the tree."),a.qZA(),a.qZA(),a.TgZ(597,"tr"),a.TgZ(598,"td"),a._uU(599,"ariaLabelledBy"),a.qZA(),a.TgZ(600,"td"),a._uU(601,"string"),a.qZA(),a.TgZ(602,"td"),a._uU(603,"pi pi-spinner"),a.qZA(),a.TgZ(604,"td"),a._uU(605,"Establishes relationships between the component and label(s) where its value should be one or more element IDs."),a.qZA(),a.qZA(),a.TgZ(606,"tr"),a.TgZ(607,"td"),a._uU(608,"togglerAriaLabel"),a.qZA(),a.TgZ(609,"td"),a._uU(610,"string"),a.qZA(),a._UZ(611,"td"),a.TgZ(612,"td"),a._uU(613,"Defines a string that labels the toggler icon for accessibility."),a.qZA(),a.qZA(),a.TgZ(614,"tr"),a.TgZ(615,"td"),a._uU(616,"validateDrop"),a.qZA(),a.TgZ(617,"td"),a._uU(618,"boolean"),a.qZA(),a.TgZ(619,"td"),a._uU(620,"false"),a.qZA(),a.TgZ(621,"td"),a._uU(622,"When enabled, drop can be accepted or rejected based on condition defined at onNodeDrop."),a.qZA(),a.qZA(),a.TgZ(623,"tr"),a.TgZ(624,"td"),a._uU(625,"filter"),a.qZA(),a.TgZ(626,"td"),a._uU(627,"boolean"),a.qZA(),a.TgZ(628,"td"),a._uU(629,"false"),a.qZA(),a.TgZ(630,"td"),a._uU(631,"When specified, displays an input field to filter the items."),a.qZA(),a.qZA(),a.TgZ(632,"tr"),a.TgZ(633,"td"),a._uU(634,"filterBy"),a.qZA(),a.TgZ(635,"td"),a._uU(636,"string"),a.qZA(),a.TgZ(637,"td"),a._uU(638,"label"),a.qZA(),a.TgZ(639,"td"),a._uU(640,"When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."),a.qZA(),a.qZA(),a.TgZ(641,"tr"),a.TgZ(642,"td"),a._uU(643,"filterMode"),a.qZA(),a.TgZ(644,"td"),a._uU(645,"string"),a.qZA(),a.TgZ(646,"td"),a._uU(647,"lenient"),a.qZA(),a.TgZ(648,"td"),a._uU(649,'Mode for filtering valid values are "lenient" and "strict". Default is lenient.'),a.qZA(),a.qZA(),a.TgZ(650,"tr"),a.TgZ(651,"td"),a._uU(652,"filterPlaceholder"),a.qZA(),a.TgZ(653,"td"),a._uU(654,"string"),a.qZA(),a.TgZ(655,"td"),a._uU(656,"null"),a.qZA(),a.TgZ(657,"td"),a._uU(658,"Placeholder text to show when filter input is empty."),a.qZA(),a.qZA(),a.TgZ(659,"tr"),a.TgZ(660,"td"),a._uU(661,"filterLocale"),a.qZA(),a.TgZ(662,"td"),a._uU(663,"string"),a.qZA(),a.TgZ(664,"td"),a._uU(665,"undefined"),a.qZA(),a.TgZ(666,"td"),a._uU(667,"Locale to use in filtering. The default locale is the host environment's current locale."),a.qZA(),a.qZA(),a.TgZ(668,"tr"),a.TgZ(669,"td"),a._uU(670,"scrollHeight"),a.qZA(),a.TgZ(671,"td"),a._uU(672,"string"),a.qZA(),a.TgZ(673,"td"),a._uU(674,"null"),a.qZA(),a.TgZ(675,"td"),a._uU(676,"Height of the scrollable viewport."),a.qZA(),a.qZA(),a.TgZ(677,"tr"),a.TgZ(678,"td"),a._uU(679,"virtualScroll"),a.qZA(),a.TgZ(680,"td"),a._uU(681,"boolean"),a.qZA(),a.TgZ(682,"td"),a._uU(683,"false"),a.qZA(),a.TgZ(684,"td"),a._uU(685,"Whether the data should be rendered on demand during scroll."),a.qZA(),a.qZA(),a.TgZ(686,"tr"),a.TgZ(687,"td"),a._uU(688,"virtualNodeHeight"),a.qZA(),a.TgZ(689,"td"),a._uU(690,"number"),a.qZA(),a.TgZ(691,"td"),a._uU(692,"null"),a.qZA(),a.TgZ(693,"td"),a._uU(694,"Height of a node to use in calculations of virtual scrolling."),a.qZA(),a.qZA(),a.TgZ(695,"tr"),a.TgZ(696,"td"),a._uU(697,"minBufferPx"),a.qZA(),a.TgZ(698,"td"),a._uU(699,"number"),a.qZA(),a.TgZ(700,"td"),a._uU(701,"null"),a.qZA(),a.TgZ(702,"td"),a._uU(703,"Minimum amount of content buffer (in pixels) that the viewport must render."),a.qZA(),a.qZA(),a.TgZ(704,"tr"),a.TgZ(705,"td"),a._uU(706,"maxBufferPx"),a.qZA(),a.TgZ(707,"td"),a._uU(708,"number"),a.qZA(),a.TgZ(709,"td"),a._uU(710,"null"),a.qZA(),a.TgZ(711,"td"),a._uU(712,"Configures how much buffer space to render back up to when it detects that more buffer is required."),a.qZA(),a.qZA(),a.TgZ(713,"tr"),a.TgZ(714,"td"),a._uU(715,"trackBy"),a.qZA(),a.TgZ(716,"td"),a._uU(717,"Function"),a.qZA(),a.TgZ(718,"td"),a._uU(719,"null"),a.qZA(),a.TgZ(720,"td"),a._uU(721,"Function to optimize the node list rendering, default algoritm checks for object identity."),a.qZA(),a.qZA(),a.TgZ(722,"tr"),a.TgZ(723,"td"),a._uU(724,"indentation"),a.qZA(),a.TgZ(725,"td"),a._uU(726,"number"),a.qZA(),a.TgZ(727,"td"),a._uU(728,"1.5"),a.qZA(),a.TgZ(729,"td"),a._uU(730,"Indentation factor for spacing of the nested node when virtual scrolling is enabled."),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.TgZ(731,"h5"),a._uU(732,"Events"),a.qZA(),a.TgZ(733,"div",13),a.TgZ(734,"table",14),a.TgZ(735,"thead"),a.TgZ(736,"tr"),a.TgZ(737,"th"),a._uU(738,"Name"),a.qZA(),a.TgZ(739,"th"),a._uU(740,"Parameters"),a.qZA(),a.TgZ(741,"th"),a._uU(742,"Description"),a.qZA(),a.qZA(),a.qZA(),a.TgZ(743,"tbody"),a.TgZ(744,"tr"),a.TgZ(745,"td"),a._uU(746,"onNodeSelect"),a.qZA(),a.TgZ(747,"td"),a._uU(748,"event.originalEvent: browser event "),a._UZ(749,"br"),a._uU(750," event.node: Selected node instance."),a.qZA(),a.TgZ(751,"td"),a._uU(752,"Callback to invoke when a node is selected."),a.qZA(),a.qZA(),a.TgZ(753,"tr"),a.TgZ(754,"td"),a._uU(755,"onNodeUnselect"),a.qZA(),a.TgZ(756,"td"),a._uU(757,"event.originalEvent: browser event "),a._UZ(758,"br"),a._uU(759," event.node: Unselected node instance."),a.qZA(),a.TgZ(760,"td"),a._uU(761,"Callback to invoke when a node is unselected."),a.qZA(),a.qZA(),a.TgZ(762,"tr"),a.TgZ(763,"td"),a._uU(764,"onNodeExpand"),a.qZA(),a.TgZ(765,"td"),a._uU(766,"event.originalEvent: browser event "),a._UZ(767,"br"),a._uU(768," event.node: Expanded node instance."),a.qZA(),a.TgZ(769,"td"),a._uU(770,"Callback to invoke when a node is expanded."),a.qZA(),a.qZA(),a.TgZ(771,"tr"),a.TgZ(772,"td"),a._uU(773,"onNodeCollapse"),a.qZA(),a.TgZ(774,"td"),a._uU(775,"event.originalEvent: browser event "),a._UZ(776,"br"),a._uU(777," event.node: Collapsed node instance."),a.qZA(),a.TgZ(778,"td"),a._uU(779,"Callback to invoke when a node is collapsed."),a.qZA(),a.qZA(),a.TgZ(780,"tr"),a.TgZ(781,"td"),a._uU(782,"onNodeContextMenuSelect"),a.qZA(),a.TgZ(783,"td"),a._uU(784,"event.originalEvent: browser event "),a._UZ(785,"br"),a._uU(786," event.node: Selected node instance."),a.qZA(),a.TgZ(787,"td"),a._uU(788,"Callback to invoke when a node is selected with right click."),a.qZA(),a.qZA(),a.TgZ(789,"tr"),a.TgZ(790,"td"),a._uU(791,"onNodeDrop"),a.qZA(),a.TgZ(792,"td"),a._uU(793,"event.originalEvent: browser event "),a._UZ(794,"br"),a._uU(795," event.dragNode: Dragged node instance "),a._UZ(796,"br"),a._uU(797," event.dropNode: Dropped node instance. event.index: Index of the dropped node within siblings."),a.qZA(),a.TgZ(798,"td"),a._uU(799,"Callback to invoke when a node is dropped."),a.qZA(),a.qZA(),a.TgZ(800,"tr"),a.TgZ(801,"td"),a._uU(802,"onFilter"),a.qZA(),a.TgZ(803,"td"),a._uU(804,"event.filter: Filter value used in filtering."),a._UZ(805,"br"),a._uU(806," event.filteredValue: Filtered data after running the filtering."),a.qZA(),a.TgZ(807,"td"),a._uU(808,"Callback to invoke when data is filtered."),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.TgZ(809,"h5"),a._uU(810,"Methods"),a.qZA(),a.TgZ(811,"div",13),a.TgZ(812,"table",14),a.TgZ(813,"thead"),a.TgZ(814,"tr"),a.TgZ(815,"th"),a._uU(816,"Name"),a.qZA(),a.TgZ(817,"th"),a._uU(818,"Parameters"),a.qZA(),a.TgZ(819,"th"),a._uU(820,"Description"),a.qZA(),a.qZA(),a.qZA(),a.TgZ(821,"tbody"),a.TgZ(822,"tr"),a.TgZ(823,"td"),a._uU(824,"resetFilter"),a.qZA(),a.TgZ(825,"td"),a._uU(826,"-"),a.qZA(),a.TgZ(827,"td"),a._uU(828,"Resets filtering."),a.qZA(),a.qZA(),a.TgZ(829,"tr"),a.TgZ(830,"td"),a._uU(831,"_filter"),a.qZA(),a.TgZ(832,"td"),a._uU(833,"value: string"),a.qZA(),a.TgZ(834,"td"),a._uU(835,"Applies filter by given value."),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.TgZ(836,"h5"),a._uU(837,"Templates"),a.qZA(),a.TgZ(838,"div",13),a.TgZ(839,"table",14),a.TgZ(840,"thead"),a.TgZ(841,"tr"),a.TgZ(842,"th"),a._uU(843,"Name"),a.qZA(),a.TgZ(844,"th"),a._uU(845,"Parameters"),a.qZA(),a.qZA(),a.qZA(),a.TgZ(846,"tbody"),a.TgZ(847,"tr"),a.TgZ(848,"td"),a._uU(849,"header"),a.qZA(),a.TgZ(850,"td"),a._uU(851,"-"),a.qZA(),a.qZA(),a.TgZ(852,"tr"),a.TgZ(853,"td"),a._uU(854,"empty"),a.qZA(),a.TgZ(855,"td"),a._uU(856,"-"),a.qZA(),a.qZA(),a.TgZ(857,"tr"),a.TgZ(858,"td"),a._uU(859,"footer"),a.qZA(),a.TgZ(860,"td"),a._uU(861,"-"),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.TgZ(862,"h5"),a._uU(863,"Styling"),a.qZA(),a.TgZ(864,"p"),a._uU(865,"Following is the list of structural style classes, for theming classes visit "),a.TgZ(866,"a",16),a._uU(867,"theming page"),a.qZA(),a._uU(868,"."),a.qZA(),a.TgZ(869,"div",13),a.TgZ(870,"table",14),a.TgZ(871,"thead"),a.TgZ(872,"tr"),a.TgZ(873,"th"),a._uU(874,"Name"),a.qZA(),a.TgZ(875,"th"),a._uU(876,"Element"),a.qZA(),a.qZA(),a.qZA(),a.TgZ(877,"tbody"),a.TgZ(878,"tr"),a.TgZ(879,"td"),a._uU(880,"p-tree"),a.qZA(),a.TgZ(881,"td"),a._uU(882,"Main container element"),a.qZA(),a.qZA(),a.TgZ(883,"tr"),a.TgZ(884,"td"),a._uU(885,"p-tree-horizontal"),a.qZA(),a.TgZ(886,"td"),a._uU(887,"Main container element in horizontal mode"),a.qZA(),a.qZA(),a.TgZ(888,"tr"),a.TgZ(889,"td"),a._uU(890,"p-tree-container"),a.qZA(),a.TgZ(891,"td"),a._uU(892,"Container of nodes"),a.qZA(),a.qZA(),a.TgZ(893,"tr"),a.TgZ(894,"td"),a._uU(895,"p-treenode"),a.qZA(),a.TgZ(896,"td"),a._uU(897,"A treenode element"),a.qZA(),a.qZA(),a.TgZ(898,"tr"),a.TgZ(899,"td"),a._uU(900,"p-treenode-content"),a.qZA(),a.TgZ(901,"td"),a._uU(902,"Content of a treenode"),a.qZA(),a.qZA(),a.TgZ(903,"tr"),a.TgZ(904,"td"),a._uU(905,"p-treenode-toggler"),a.qZA(),a.TgZ(906,"td"),a._uU(907,"Toggle icon"),a.qZA(),a.qZA(),a.TgZ(908,"tr"),a.TgZ(909,"td"),a._uU(910,"p-treenode-icon"),a.qZA(),a.TgZ(911,"td"),a._uU(912,"Icon of a treenode"),a.qZA(),a.qZA(),a.TgZ(913,"tr"),a.TgZ(914,"td"),a._uU(915,"p-treenode-label"),a.qZA(),a.TgZ(916,"td"),a._uU(917,"Label of a treenode"),a.qZA(),a.qZA(),a.TgZ(918,"tr"),a.TgZ(919,"td"),a._uU(920,"p-treenode-children"),a.qZA(),a.TgZ(921,"td"),a._uU(922,"Container element for node children"),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.TgZ(923,"h5"),a._uU(924,"Dependencies"),a.qZA(),a.TgZ(925,"p"),a._uU(926,"None."),a.qZA(),a.qZA(),a.TgZ(927,"p-tabPanel",17),a.TgZ(928,"a",18),a.TgZ(929,"span"),a._uU(930,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(931,"a",19),a.TgZ(932,"span"),a._uU(933,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(934,"app-code",11),a.IAx(),a._uU(935,'\n<h5>Basic</h5>\n<p-tree [value]="files1"></p-tree>\n\n<h5>Programmatic</h5>\n<div style="margin-bottom: 1rem">\n    <button pButton type="button" label="Expand all" (click)="expandAll()" style="margin-right: .5rem"></button>\n    <button pButton type="button" label="Collapse all" (click)="collapseAll()"></button>\n</div>\n<p-tree [value]="files2"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(936,"app-code",12),a.IAx(),a._uU(937,"\nimport {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treebasicdemo.html'\n})\nexport class TreeBasicDemo implements OnInit {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files1 = files);\n        this.nodeService.getFiles().then(files => this.files2 = files);\n    }\n\n    expandAll(){\n        this.files2.forEach( node => {\n            this.expandRecursive(node, true);\n        } );\n    }\n\n    collapseAll(){\n        this.files2.forEach( node => {\n            this.expandRecursive(node, false);\n        } );\n    }\n\n    private expandRecursive(node:TreeNode, isExpand:boolean){\n        node.expanded = isExpand;\n        if (node.children){\n            node.children.forEach( childNode => {\n                this.expandRecursive(childNode, isExpand);\n            } );\n        }\n    }\n}\n"),a.fQ9(),a.qZA(),a.qZA(),a.TgZ(938,"p-tabPanel",20),a.YNc(939,u,1,0,"ng-template",21),a.qZA(),a.qZA(),a.qZA()}2&e&&(a.xp6(11),a.Q6J("value",t.files1),a.xp6(6),a.Q6J("value",t.files2),a.xp6(849),a.Q6J("routerLink",a.DdM(3,h)))},directives:[d.P,s.mp,p.Hq,c.xf,c.x4,Z.h,r.yS,g.jx],encapsulation:2}),e})();function m(e,t){if(1&e&&(a.TgZ(0,"a",17),a._uU(1),a.qZA()),2&e){const e=t.$implicit;a.Q6J("href",e.data,a.LSH),a.xp6(1),a.Oqu(e.label)}}function A(e,t){if(1&e&&(a.TgZ(0,"b"),a._uU(1),a.qZA()),2&e){const e=t.$implicit;a.xp6(1),a.Oqu(e.label)}}function f(e,t){1&e&&a._UZ(0,"iframe",18)}let q=(()=>{class e{constructor(){}ngOnInit(){this.nodes=[{key:"0",label:"Introduction",children:[{key:"0-0",label:"What is Angular",data:"https://angular.io",type:"url"},{key:"0-1",label:"Getting Started",data:"https://angular.io/guide/setup-local",type:"url"},{key:"0-2",label:"Learn and Explore",data:"https://angular.io/guide/architecture",type:"url"},{key:"0-3",label:"Take a Look",data:"https://angular.io/start",type:"url"}]},{key:"1",label:"Components In-Depth",children:[{key:"1-0",label:"Component Registration",data:"https://angular.io/guide/component-interaction",type:"url"},{key:"1-1",label:"User Input",data:"https://angular.io/guide/user-input",type:"url"},{key:"1-2",label:"Hooks",data:"https://angular.io/guide/lifecycle-hooks",type:"url"},{key:"1-3",label:"Attribute Directives",data:"https://angular.io/guide/attribute-directives",type:"url"}]}]}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],decls:31,vars:1,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","treetemplating-demo"],[1,"content-section","implementation"],[1,"card"],[3,"value"],["pTemplate","url"],["pTemplate","default"],[1,"content-section","documentation"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-treetemplating-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["lang","markup"],["lang","typescript"],["lang","css","ngOnBindable",""],["header","StackBlitz"],["pTemplate","content"],[3,"href"],["src","https://stackblitz.com/edit/primeng-treetemplating-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){1&e&&(a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree "),a.TgZ(4,"span"),a._uU(5,"Templating"),a.qZA(),a.qZA(),a.TgZ(6,"p"),a._uU(7,"Tree is used to display hierarchical data."),a.qZA(),a.qZA(),a._UZ(8,"app-demoActions",2),a.qZA(),a.TgZ(9,"div",3),a.TgZ(10,"div",4),a.TgZ(11,"p-tree",5),a.YNc(12,m,2,2,"ng-template",6),a.YNc(13,A,2,1,"ng-template",7),a.qZA(),a.qZA(),a.qZA(),a.TgZ(14,"div",8),a.TgZ(15,"p-tabView"),a.TgZ(16,"p-tabPanel",9),a.TgZ(17,"a",10),a.TgZ(18,"span"),a._uU(19,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(20,"a",11),a.TgZ(21,"span"),a._uU(22,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(23,"app-code",12),a.IAx(),a._uU(24,'\n<p-tree [value]="nodes">\n    <ng-template let-node pTemplate="url">\n        <a [href]="node.data">{{node.label}}</a>\n    </ng-template>\n    <ng-template let-node pTemplate="default">\n        <b>{{node.label}}</b>\n    </ng-template>\n</p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(25,"app-code",13),a.IAx(),a._uU(26,"\nexport class TreeTemplatingDemo implements OnInit {\n\n    nodes: TreeNode[];\n    \n    constructor() { }\n\n    ngOnInit() {\n        this.nodes = [\n            {\n                key: '0',\n                label: 'Introduction',\n                children: [\n                    {key: '0-0', label: 'What is Angular', data:'https://angular.io', type: 'url'},\n                    {key: '0-1', label: 'Getting Started', data: 'https://angular.io/guide/setup-local', type: 'url'},\n                    {key: '0-2', label: 'Learn and Explore', data:'https://angular.io/guide/architecture', type: 'url'},\n                    {key: '0-3', label: 'Take a Look', data: 'https://angular.io/start', type: 'url'}\n                ]\n            },\n            {\n                key: '1',\n                label: 'Components In-Depth',\n                children: [\n                    {key: '1-0', label: 'Component Registration', data: 'https://angular.io/guide/component-interaction', type: 'url'},\n                    {key: '1-1', label: 'User Input', data: 'https://angular.io/guide/user-input', type: 'url'},\n                    {key: '1-2', label: 'Hooks', data: 'https://angular.io/guide/lifecycle-hooks', type: 'url'},\n                    {key: '1-3', label: 'Attribute Directives', data: 'https://angular.io/guide/attribute-directives', type: 'url'}\n                ]\n            }\n        ];\n    }\n\n}\n"),a.fQ9(),a.qZA(),a.TgZ(27,"app-code",14),a._uU(28,"\nbutton { margin-right: .5rem;\n} :host ::ng-deep .p-tree { a { color: #2196f3; } }\n"),a.qZA(),a.qZA(),a.TgZ(29,"p-tabPanel",15),a.YNc(30,f,1,0,"ng-template",16),a.qZA(),a.qZA(),a.qZA()),2&e&&(a.xp6(11),a.Q6J("value",t.nodes))},directives:[d.P,s.mp,g.jx,c.xf,c.x4,Z.h],styles:["button[_ngcontent-%COMP%]{margin-right:.5rem}[_nghost-%COMP%]     .p-tree a{color:#2196f3}"]}),e})();var U=n(78230),_=n(22320);function b(e,t){1&e&&a._UZ(0,"iframe",16)}let v=(()=>{class e{constructor(e,t){this.nodeService=e,this.messageService=t}ngOnInit(){this.nodeService.getFiles().then(e=>this.files1=e),this.nodeService.getFiles().then(e=>this.files2=e),this.nodeService.getFiles().then(e=>this.files3=e)}nodeSelect(e){this.messageService.add({severity:"info",summary:"Node Selected",detail:e.node.label})}nodeUnselect(e){this.messageService.add({severity:"info",summary:"Node Unselected",detail:e.node.label})}}return e.\u0275fac=function(t){return new(t||e)(a.Y36(l.s),a.Y36(U.ez))},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],features:[a._Bn([U.ez])],decls:45,vars:6,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","treeselection-demo"],[1,"content-section","implementation"],[1,"card"],["selectionMode","single",3,"value","selection","selectionChange","onNodeSelect","onNodeUnselect"],["selectionMode","multiple",3,"value","selection","selectionChange","onNodeSelect","onNodeUnselect"],["selectionMode","checkbox",3,"value","selection","selectionChange"],[1,"content-section","documentation"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-treeselection-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["lang","markup"],["lang","typescript"],["header","StackBlitz"],["pTemplate","content"],["src","https://stackblitz.com/edit/primeng-treeselection-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){1&e&&(a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree "),a.TgZ(4,"span"),a._uU(5,"Selection"),a.qZA(),a.qZA(),a.TgZ(6,"p"),a._uU(7,"Tree supports "),a.TgZ(8,"b"),a._uU(9,"single"),a.qZA(),a._uU(10,", "),a.TgZ(11,"b"),a._uU(12,"multiple"),a.qZA(),a._uU(13," and "),a.TgZ(14,"b"),a._uU(15,"checkbox"),a.qZA(),a._uU(16," as selection modes."),a.qZA(),a.qZA(),a._UZ(17,"app-demoActions",2),a.qZA(),a.TgZ(18,"div",3),a.TgZ(19,"div",4),a.TgZ(20,"h5"),a._uU(21,"Single Selection"),a.qZA(),a.TgZ(22,"p-tree",5),a.NdJ("selectionChange",function(e){return t.selectedFile=e})("onNodeSelect",function(e){return t.nodeSelect(e)})("onNodeUnselect",function(e){return t.nodeUnselect(e)}),a.qZA(),a.TgZ(23,"h5"),a._uU(24,"Multiple Selection with Metakey"),a.qZA(),a.TgZ(25,"p-tree",6),a.NdJ("selectionChange",function(e){return t.selectedFiles1=e})("onNodeSelect",function(e){return t.nodeSelect(e)})("onNodeUnselect",function(e){return t.nodeUnselect(e)}),a.qZA(),a.TgZ(26,"h5"),a._uU(27,"Multiple Selection with Checkbox"),a.qZA(),a.TgZ(28,"p-tree",7),a.NdJ("selectionChange",function(e){return t.selectedFiles2=e}),a.qZA(),a._UZ(29,"p-toast"),a.qZA(),a.qZA(),a.TgZ(30,"div",8),a.TgZ(31,"p-tabView"),a.TgZ(32,"p-tabPanel",9),a.TgZ(33,"a",10),a.TgZ(34,"span"),a._uU(35,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(36,"a",11),a.TgZ(37,"span"),a._uU(38,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(39,"app-code",12),a.IAx(),a._uU(40,'\n<h5>Single Selection</h5>\n<p-tree [value]="files1" selectionMode="single" [(selection)]="selectedFile"\n    (onNodeSelect)="nodeSelect($event)" (onNodeUnselect)="nodeUnselect($event)"></p-tree>\n\n<h5>Multiple Selection with Metakey</h5>\n<p-tree [value]="files2" selectionMode="multiple" [(selection)]="selectedFiles1"\n    (onNodeSelect)="nodeSelect($event)" (onNodeUnselect)="nodeUnselect($event)"></p-tree>\n\n<h5>Multiple Selection with Checkbox</h5>\n<p-tree [value]="files3" selectionMode="checkbox" [(selection)]="selectedFiles2"></p-tree>\n\n<p-toast></p-toast>\n'),a.fQ9(),a.qZA(),a.TgZ(41,"app-code",13),a.IAx(),a._uU(42,"\nimport {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\nimport {MessageService} from 'primeng/api';\n\n@Component({\n    templateUrl: './treeselectiondemo.html',\n    providers: [MessageService]\n})\nexport class TreeSelectionDemo implements OnInit {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    files3: TreeNode[];\n\n    selectedFile: TreeNode;\n\n    selectedFiles1: TreeNode;\n\n    selectedFiles2: TreeNode;\n    \n    constructor(private nodeService: NodeService, private messageService: MessageService) { }\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files1 = files);\n        this.nodeService.getFiles().then(files => this.files2 = files);\n        this.nodeService.getFiles().then(files => this.files3 = files);\n    }\n\n    nodeSelect(event) {\n        this.messageService.add({severity: 'info', summary: 'Node Selected', detail: event.node.label});\n    }\n    \n    nodeUnselect(event) {\n        this.messageService.add({severity: 'info', summary: 'Node Unselected', detail: event.node.label});\n    }\n}\n"),a.fQ9(),a.qZA(),a.qZA(),a.TgZ(43,"p-tabPanel",14),a.YNc(44,b,1,0,"ng-template",15),a.qZA(),a.qZA(),a.qZA()),2&e&&(a.xp6(22),a.Q6J("value",t.files1)("selection",t.selectedFile),a.xp6(3),a.Q6J("value",t.files2)("selection",t.selectedFiles1),a.xp6(3),a.Q6J("value",t.files3)("selection",t.selectedFiles2))},directives:[d.P,s.mp,_.FN,c.xf,c.x4,Z.h,g.jx],encapsulation:2}),e})();function x(e,t){1&e&&a._UZ(0,"iframe",15)}let S=(()=>{class e{constructor(e){this.nodeService=e}ngOnInit(){this.nodeService.getFiles().then(e=>this.files1=e),this.nodeService.getFiles().then(e=>this.files2=e)}}return e.\u0275fac=function(t){return new(t||e)(a.Y36(l.s))},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],decls:32,vars:4,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","treefilter-demo"],[1,"content-section","implementation"],[1,"card"],[3,"value","filter"],["filterMode","strict",3,"value","filter"],[1,"content-section","documentation"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-treefilter-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["lang","markup"],["lang","typescript"],["header","StackBlitz"],["pTemplate","content"],["src","https://stackblitz.com/edit/primeng-treefilter-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){1&e&&(a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree "),a.TgZ(4,"span"),a._uU(5,"Filter"),a.qZA(),a.qZA(),a.TgZ(6,"p"),a._uU(7,"Filtering updates the node based on the constraints."),a.qZA(),a.qZA(),a._UZ(8,"app-demoActions",2),a.qZA(),a.TgZ(9,"div",3),a.TgZ(10,"div",4),a.TgZ(11,"h5"),a._uU(12,"Lenient Filter Mode"),a.qZA(),a._UZ(13,"p-tree",5),a.TgZ(14,"h5"),a._uU(15,"Strict Filter Mode"),a.qZA(),a._UZ(16,"p-tree",6),a.qZA(),a.qZA(),a.TgZ(17,"div",7),a.TgZ(18,"p-tabView"),a.TgZ(19,"p-tabPanel",8),a.TgZ(20,"a",9),a.TgZ(21,"span"),a._uU(22,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(23,"a",10),a.TgZ(24,"span"),a._uU(25,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(26,"app-code",11),a.IAx(),a._uU(27,'\n<h3>Lenient Filter Mode</h3>\n<p-tree [value]="files1" [filter]="true"></p-tree>\n\n<h3>Strict Filter Mode</h3>\n<p-tree [value]="files2" [filter]="true" filterMode="strict"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(28,"app-code",12),a.IAx(),a._uU(29,"\nimport {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treefilterdemo.html'\n})\nexport class TreeFilterDemo implements OnInit {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n    \n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files1 = files);\n        this.nodeService.getFiles().then(files => this.files2 = files);\n    }\n}\n"),a.fQ9(),a.qZA(),a.qZA(),a.TgZ(30,"p-tabPanel",13),a.YNc(31,x,1,0,"ng-template",14),a.qZA(),a.qZA(),a.qZA()),2&e&&(a.xp6(13),a.Q6J("value",t.files1)("filter",!0),a.xp6(3),a.Q6J("value",t.files2)("filter",!0))},directives:[d.P,s.mp,c.xf,c.x4,Z.h,g.jx],encapsulation:2}),e})();function y(e,t){1&e&&a._UZ(0,"iframe",14)}let N=(()=>{class e{constructor(e,t){this.nodeService=e,this.messageService=t}ngOnInit(){this.loading=!0,setTimeout(()=>{this.nodeService.getLazyFiles().then(e=>this.files=e),this.loading=!1},1e3)}nodeExpand(e){e.node&&this.nodeService.getLazyFiles().then(t=>{e.node.children=t,this.messageService.add({severity:"info",summary:"Children Loaded",detail:e.node.label})})}}return e.\u0275fac=function(t){return new(t||e)(a.Y36(l.s),a.Y36(U.ez))},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],features:[a._Bn([U.ez])],decls:28,vars:2,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","treelazy-demo"],[1,"content-section","implementation"],[1,"card"],[3,"value","loading","onNodeExpand"],[1,"content-section","documentation"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-treelazy-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["lang","markup"],["lang","typescript"],["header","StackBlitz"],["pTemplate","content"],["src","https://stackblitz.com/edit/primeng-treelazy-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){1&e&&(a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree "),a.TgZ(4,"span"),a._uU(5,"Lazy"),a.qZA(),a.qZA(),a.TgZ(6,"p"),a._uU(7,"Lazy loading is handy when dealing with huge datasets. This example imitates a lazy loading case with timeouts."),a.qZA(),a.qZA(),a._UZ(8,"app-demoActions",2),a.qZA(),a.TgZ(9,"div",3),a.TgZ(10,"div",4),a.TgZ(11,"p-tree",5),a.NdJ("onNodeExpand",function(e){return t.nodeExpand(e)}),a.qZA(),a._UZ(12,"p-toast"),a.qZA(),a.qZA(),a.TgZ(13,"div",6),a.TgZ(14,"p-tabView"),a.TgZ(15,"p-tabPanel",7),a.TgZ(16,"a",8),a.TgZ(17,"span"),a._uU(18,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(19,"a",9),a.TgZ(20,"span"),a._uU(21,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(22,"app-code",10),a.IAx(),a._uU(23,'\n<p-tree [value]="files" (onNodeExpand)="nodeExpand($event)" [loading]="loading"></p-tree>\n\n<p-toast></p-toast>\n'),a.fQ9(),a.qZA(),a.TgZ(24,"app-code",11),a.IAx(),a._uU(25,"\nimport {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\nimport {MessageService} from 'primeng/api';\n\n@Component({\n    templateUrl: './treelazydemo.html',\n    providers: [MessageService]\n})\nexport class TreeLazyDemo implements OnInit {\n\n    files: TreeNode[];\n\n    loading: boolean;\n    \n    constructor(private nodeService: NodeService, private messageService: MessageService) { }\n\n    ngOnInit() {\n        this.loading = true;\n        setTimeout(() => {\n            this.nodeService.getLazyFiles().then(files => this.files = files);\n            this.loading = false;\n        }, 1000);\n    }\n\n    nodeExpand(event) {\n        if (event.node) {\n            //in a real application, make a call to a remote url to load children of the current node and add the new nodes as children\n            this.nodeService.getLazyFiles().then(nodes => {\n                event.node.children = nodes\n                this.messageService.add({severity: 'info', summary: 'Children Loaded', detail: event.node.label});\n            });\n        }\n    }\n}\n"),a.fQ9(),a.qZA(),a.qZA(),a.TgZ(26,"p-tabPanel",12),a.YNc(27,y,1,0,"ng-template",13),a.qZA(),a.qZA(),a.qZA()),2&e&&(a.xp6(11),a.Q6J("value",t.files)("loading",t.loading))},directives:[d.P,s.mp,_.FN,c.xf,c.x4,Z.h,g.jx],encapsulation:2}),e})();var w=n(11360);function k(e,t){if(1&e){const e=a.EpF();a.TgZ(0,"button",19),a.NdJ("click",function(){return a.CHM(e),a.oxw().dialogVisible=!1}),a.qZA()}}function I(e,t){1&e&&a._UZ(0,"iframe",20)}const F=function(){return{width:"50vw"}},z=function(){return{height:"300px"}};let M=(()=>{class e{constructor(e){this.nodeService=e}ngOnInit(){this.nodeService.getFiles().then(e=>this.files1=e),this.files2=Array.from({length:100}).map((e,t)=>this.createNode(t,2)),this.files3=Array.from({length:50}).map((e,t)=>this.createNode(t,1e3))}createNode(e,t){return{label:"Node "+e,data:"Node "+e,expandedIcon:"pi pi-folder-open",collapsedIcon:"pi pi-folder",children:Array.from({length:t}).map((t,n)=>({label:"Node "+e+"."+n,data:"Node "+e+"."+n,icon:"pi pi-file-o"}))}}showDialog(){this.dialogVisible=!0}}return e.\u0275fac=function(t){return new(t||e)(a.Y36(l.s))},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],decls:40,vars:15,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","treescroll-demo"],[1,"content-section","implementation"],[1,"card"],["scrollHeight","200px",3,"value"],["type","button","pButton","","icon","pi pi-external-link","label","View",3,"click"],["header","Flexible ScrollHeight","styleClass","p-fluid",3,"visible","baseZIndex","maximizable","modal","resizable","contentStyle","visibleChange"],["scrollHeight","flex",3,"value"],["pTemplate","footer"],["scrollHeight","200px",3,"value","virtualScroll","virtualNodeHeight"],[1,"content-section","documentation"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-treescroll-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["lang","markup"],["lang","typescript"],["header","StackBlitz"],["pTemplate","content"],["type","button","pButton","","icon","pi pi-check","label","Ok",1,"p-button-text",3,"click"],["src","https://stackblitz.com/edit/primeng-treescroll-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){1&e&&(a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree "),a.TgZ(4,"span"),a._uU(5,"Scroll"),a.qZA(),a.qZA(),a.TgZ(6,"p"),a._uU(7,"Regular scrolling is used to preserve space as content of the tree is dynamic whereas virtual scrolling is a performant approach to large data rendering."),a.qZA(),a.qZA(),a._UZ(8,"app-demoActions",2),a.qZA(),a.TgZ(9,"div",3),a.TgZ(10,"div",4),a.TgZ(11,"h5"),a._uU(12,"Regular Scroll"),a.qZA(),a._UZ(13,"p-tree",5),a.TgZ(14,"h5"),a._uU(15,"Flexible Viewport"),a.qZA(),a.TgZ(16,"p"),a._uU(17,"Flex scroll feature makes the scrollable viewport section dynamic so that it can grow or shrink relative to the parent size of the tree. Click the button below to display a resizable and maximizable Dialog where data viewport adjusts itself according to the size changes."),a.qZA(),a.TgZ(18,"button",6),a.NdJ("click",function(){return t.showDialog()}),a.qZA(),a.TgZ(19,"p-dialog",7),a.NdJ("visibleChange",function(e){return t.dialogVisible=e}),a._UZ(20,"p-tree",8),a.YNc(21,k,1,0,"ng-template",9),a.qZA(),a.TgZ(22,"h5"),a._uU(23,"Virtual Scroll"),a.qZA(),a._UZ(24,"p-tree",10),a.qZA(),a.qZA(),a.TgZ(25,"div",11),a.TgZ(26,"p-tabView"),a.TgZ(27,"p-tabPanel",12),a.TgZ(28,"a",13),a.TgZ(29,"span"),a._uU(30,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(31,"a",14),a.TgZ(32,"span"),a._uU(33,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(34,"app-code",15),a.IAx(),a._uU(35,'\n<h5>Regular Scroll</h5>\n<p-tree [value]="files1" scrollHeight="200px"></p-tree>\n\n<h5>Flexible Viewport</h5>\n<p>Flex scroll feature makes the scrollable viewport section dynamic so that it can grow or shrink relative to the parent size of the tree. Click the button below\n    to display a resizable and maximizable Dialog where data viewport adjusts itself according to the size changes.</p>\n\n<button type="button" (click)="showDialog()" pButton icon="pi pi-external-link" label="View"></button>\n<p-dialog header="Flexible ScrollHeight" [(visible)]="dialogVisible" [style]="{width: \'50vw\'}" [baseZIndex]="10000" [maximizable]="true" [modal]="true" \n    [resizable]="true" [contentStyle]="{height: \'300px\'}" styleClass="p-fluid">\n    <p-tree [value]="files2" scrollHeight="flex"></p-tree>   \n    <ng-template pTemplate="footer">\n        <button type="button" pButton icon="pi pi-check" (click)="dialogVisible=false" label="Ok" class="p-button-text"></button>\n    </ng-template> \n</p-dialog>\n\n<h5>Virtual Scroll</h5>\n<p-tree [value]="files3" [virtualScroll]="true" [virtualNodeHeight]="33" scrollHeight="200px"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(36,"app-code",16),a.IAx(),a._uU(37,"\nimport {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treescrolldemo.html'\n})\nexport class TreeScrollDemo implements OnInit {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    files3: TreeNode[];\n\n    dialogVisible: boolean;\n    \n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files1 = files);\n        this.files2 = Array.from({length: 100}).map((_,i) => this.createNode(i, 2));\n        this.files3 = Array.from({length: 50}).map((_,i) => this.createNode(i, 1000));\n    }\n\n    createNode(i: number, children: number): TreeNode {\n        let node: TreeNode = {\n            label: 'Node ' + i,\n            data: 'Node ' + i,\n            expandedIcon: 'pi pi-folder-open',\n            collapsedIcon: 'pi pi-folder',\n            children: Array.from({length: children}).map((_,j) => {\n                return {\n                    label: 'Node ' + i + '.' + j, \n                    data: 'Node ' + i + '.' + j, \n                    icon: 'pi pi-file-o'\n                }\n            })\n        };\n\n        return node;\n    }\n\n    showDialog() {\n        this.dialogVisible = true;\n    }\n}\n"),a.fQ9(),a.qZA(),a.qZA(),a.TgZ(38,"p-tabPanel",17),a.YNc(39,I,1,0,"ng-template",18),a.qZA(),a.qZA(),a.qZA()),2&e&&(a.xp6(13),a.Q6J("value",t.files1),a.xp6(6),a.Akn(a.DdM(13,F)),a.Q6J("visible",t.dialogVisible)("baseZIndex",1e4)("maximizable",!0)("modal",!0)("resizable",!0)("contentStyle",a.DdM(14,z)),a.xp6(1),a.Q6J("value",t.files2),a.xp6(4),a.Q6J("value",t.files3)("virtualScroll",!0)("virtualNodeHeight",33))},directives:[d.P,s.mp,p.Hq,w.V,g.jx,c.xf,c.x4,Z.h],encapsulation:2}),e})();var C=n(41929);function D(e,t){1&e&&a._UZ(0,"iframe",16)}let Q=(()=>{class e{constructor(e,t){this.nodeService=e,this.messageService=t}ngOnInit(){this.nodeService.getFiles().then(e=>this.files=e),this.items=[{label:"View",icon:"pi pi-search",command:e=>this.viewFile(this.selectedFile)},{label:"Unselect",icon:"pi pi-times",command:e=>this.unselectFile()}]}viewFile(e){this.messageService.add({severity:"info",summary:"Node Details",detail:e.label})}unselectFile(){this.selectedFile=null}}return e.\u0275fac=function(t){return new(t||e)(a.Y36(l.s),a.Y36(U.ez))},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],features:[a._Bn([U.ez])],decls:30,vars:4,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","treecontextmenu-demo"],[1,"content-section","implementation"],[1,"card"],["selectionMode","single",3,"value","selection","contextMenu","selectionChange"],[3,"model"],["cm",""],[1,"content-section","documentation"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-treecontextmenu-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["lang","markup"],["lang","typescript"],["header","StackBlitz"],["pTemplate","content"],["src","https://stackblitz.com/edit/primeng-treecontextmenu-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){if(1&e&&(a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree "),a.TgZ(4,"span"),a._uU(5,"ContextMenu"),a.qZA(),a.qZA(),a.TgZ(6,"p"),a._uU(7,"Tree has exclusive integration with ContextMenu."),a.qZA(),a.qZA(),a._UZ(8,"app-demoActions",2),a.qZA(),a.TgZ(9,"div",3),a.TgZ(10,"div",4),a.TgZ(11,"p-tree",5),a.NdJ("selectionChange",function(e){return t.selectedFile=e}),a.qZA(),a._UZ(12,"p-contextMenu",6,7),a._UZ(14,"p-toast"),a.qZA(),a.qZA(),a.TgZ(15,"div",8),a.TgZ(16,"p-tabView"),a.TgZ(17,"p-tabPanel",9),a.TgZ(18,"a",10),a.TgZ(19,"span"),a._uU(20,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(21,"a",11),a.TgZ(22,"span"),a._uU(23,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(24,"app-code",12),a.IAx(),a._uU(25,'\n<p-tree [value]="files" selectionMode="single" [(selection)]="selectedFile" [contextMenu]="cm"></p-tree>\n\n<p-contextMenu #cm [model]="items"></p-contextMenu>\n<p-toast></p-toast>\n'),a.fQ9(),a.qZA(),a.TgZ(26,"app-code",13),a.IAx(),a._uU(27,"\nimport {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {MenuItem,TreeNode} from 'primeng/api';\nimport {MessageService} from 'primeng/api';\n\n@Component({\n    templateUrl: './treecontextmenudemo.html',\n    providers: [MessageService]\n})\nexport class TreeContextMenuDemo implements OnInit {\n\n    files: TreeNode[];\n\n    selectedFile: TreeNode;\n\n    items: MenuItem[];\n    \n    constructor(private nodeService: NodeService, private messageService: MessageService) { }\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files = files);\n\n        this.items = [\n            {label: 'View', icon: 'pi pi-search', command: (event) => this.viewFile(this.selectedFile)},\n            {label: 'Unselect', icon: 'pi pi-times', command: (event) => this.unselectFile()}\n        ];\n    }\n\n    viewFile(file: TreeNode) {\n        this.messageService.add({severity: 'info', summary: 'Node Details', detail: file.label});\n    }\n    \n    unselectFile() {\n        this.selectedFile = null;\n    }\n}\n"),a.fQ9(),a.qZA(),a.qZA(),a.TgZ(28,"p-tabPanel",14),a.YNc(29,D,1,0,"ng-template",15),a.qZA(),a.qZA(),a.qZA()),2&e){const e=a.MAs(13);a.xp6(11),a.Q6J("value",t.files)("selection",t.selectedFile)("contextMenu",e),a.xp6(1),a.Q6J("model",t.items)}},directives:[d.P,s.mp,C.xV,_.FN,c.xf,c.x4,Z.h,g.jx],encapsulation:2}),e})();function O(e,t){1&e&&a._UZ(0,"iframe",19)}let B=(()=>{class e{constructor(e){this.nodeService=e}ngOnInit(){this.nodeService.getFiles().then(e=>this.files1=e),this.nodeService.getFiles().then(e=>this.files2=e),this.files3=[{label:"Backup",data:"Backup Folder",expandedIcon:"pi pi-folder-open",collapsedIcon:"pi pi-folder"}],this.files4=[{label:"Storage",data:"Storage Folder",expandedIcon:"pi pi-folder-open",collapsedIcon:"pi pi-folder"}]}}return e.\u0275fac=function(t){return new(t||e)(a.Y36(l.s))},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],features:[a._Bn([U.Y,U.ez])],decls:54,vars:12,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","treedragdrop-demo"],[1,"content-section","implementation"],[1,"card"],["draggableScope","self","droppableScope","self",3,"value","draggableNodes","droppableNodes"],[1,"p-grid","p-fluid"],[1,"p-col-12","p-md-4"],["droppableScope","files","draggableScope","server2",3,"value","draggableNodes","droppableNodes"],["droppableScope","server1","draggableScope","files",3,"value","draggableNodes","droppableNodes"],["droppableScope","server2","draggableScope","server1",3,"value","draggableNodes","droppableNodes"],[1,"content-section","documentation"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree/treedragdropdemo.ts","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-treedragdrop-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["lang","markup"],["lang","typescript"],["header","StackBlitz"],["pTemplate","content"],["src","https://stackblitz.com/edit/primeng-treedragdrop-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){1&e&&(a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree "),a.TgZ(4,"span"),a._uU(5,"DragDrop"),a.qZA(),a.qZA(),a.TgZ(6,"p"),a._uU(7,"Nodes can be reordered within the same tree and also can be transferred between other trees using drag&drop."),a.qZA(),a.qZA(),a._UZ(8,"app-demoActions",2),a.qZA(),a.TgZ(9,"div",3),a.TgZ(10,"div",4),a.TgZ(11,"h5"),a._uU(12,"Single Tree"),a.qZA(),a.TgZ(13,"p"),a._uU(14,"Node reordering within a tree."),a.qZA(),a._UZ(15,"p-tree",5),a.TgZ(16,"h5"),a._uU(17,"Multiple Trees"),a.qZA(),a.TgZ(18,"p"),a._uU(19,"Node reordering between multiple tree based on scope constraints."),a.qZA(),a.TgZ(20,"div",6),a.TgZ(21,"div",7),a.TgZ(22,"h4"),a._uU(23,"Files"),a.qZA(),a.TgZ(24,"p"),a._uU(25,"Can transfer to Server 2."),a.qZA(),a._UZ(26,"p-tree",8),a.qZA(),a.TgZ(27,"div",7),a.TgZ(28,"h4"),a._uU(29,"Server 1"),a.qZA(),a.TgZ(30,"p"),a._uU(31,"Can transfer to Files."),a.qZA(),a._UZ(32,"p-tree",9),a.qZA(),a.TgZ(33,"div",7),a.TgZ(34,"h4"),a._uU(35,"Server 2"),a.qZA(),a.TgZ(36,"p"),a._uU(37,"Can transfer to Server 1."),a.qZA(),a._UZ(38,"p-tree",10),a.qZA(),a.qZA(),a.qZA(),a.qZA(),a.TgZ(39,"div",11),a.TgZ(40,"p-tabView"),a.TgZ(41,"p-tabPanel",12),a.TgZ(42,"a",13),a.TgZ(43,"span"),a._uU(44,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(45,"a",14),a.TgZ(46,"span"),a._uU(47,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(48,"app-code",15),a.IAx(),a._uU(49,'\n<h5>Single Tree</h5>\n<p>Node reordering within a tree.</p>\n<p-tree [value]="files1" [draggableNodes]="true" [droppableNodes]="true" draggableScope="self" droppableScope="self"></p-tree>\n\n<h5>Multiple Trees</h5>\n<p>Node reordering between multiple tree based on scope constraints.</p>\n<div class="p-grid p-fluid">\n    <div class="p-col-12 p-md-4">\n        <h4>Files</h4>\n        <p>Can transfer to Server 2.</p>\n        <p-tree [value]="files2" [draggableNodes]="true" [droppableNodes]="true" droppableScope="files" draggableScope="server2"></p-tree>\n    </div>\n\n    <div class="p-col-12 p-md-4">\n        <h4>Server 1</h4>\n        <p>Can transfer to Files.</p>\n        <p-tree [value]="files3" [draggableNodes]="true" [droppableNodes]="true" droppableScope="server1" draggableScope="files"></p-tree>\n    </div>\n\n    <div class="p-col-12 p-md-4">\n        <h4>Server 2</h4>\n        <p>Can transfer to Server 1.</p>\n        <p-tree [value]="files4" [draggableNodes]="true" [droppableNodes]="true" droppableScope="server2" draggableScope="server1"></p-tree>\n    </div>\n</div>\n'),a.fQ9(),a.qZA(),a.TgZ(50,"app-code",16),a.IAx(),a._uU(51,'\nimport {Component,OnInit} from \'@angular/core\';\nimport {NodeService} from \'../../service/nodeservice\';\nimport {TreeNode} from \'primeng/api\';\nimport {TreeDragDropService} from \'primeng/api\';\nimport {MessageService} from \'primeng/api\';\n\n@Component({\n    templateUrl: \'./treedragdropdemo.html\',\n    providers: [TreeDragDropService,MessageService],\n    styles:[`\n        h4 {\n            text-align: center;\n            margin: 0 0 8px 0;\n        }\n    `]\n})\nexport class TreeDragDropDemo implements OnInit {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    files3: TreeNode[];\n\n    files4: TreeNode[];\n    \n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => this.files1 = files);\n        this.nodeService.getFiles().then(files => this.files2 = files);\n        this.files3 = [{\n                label: "Backup",\n                data: "Backup Folder",\n                expandedIcon: "pi pi-folder-open",\n                collapsedIcon: "pi pi-folder"\n            }\n        ];\n\n        this.files4 = [{\n                label: "Storage",\n                data: "Storage Folder",\n                expandedIcon: "pi pi-folder-open",\n                collapsedIcon: "pi pi-folder"\n            }\n        ];\n    }\n}\n'),a.fQ9(),a.qZA(),a.qZA(),a.TgZ(52,"p-tabPanel",17),a.YNc(53,O,1,0,"ng-template",18),a.qZA(),a.qZA(),a.qZA()),2&e&&(a.xp6(15),a.Q6J("value",t.files1)("draggableNodes",!0)("droppableNodes",!0),a.xp6(11),a.Q6J("value",t.files2)("draggableNodes",!0)("droppableNodes",!0),a.xp6(6),a.Q6J("value",t.files3)("draggableNodes",!0)("droppableNodes",!0),a.xp6(6),a.Q6J("value",t.files4)("draggableNodes",!0)("droppableNodes",!0))},directives:[d.P,s.mp,c.xf,c.x4,Z.h,g.jx],styles:["h4[_ngcontent-%COMP%]{text-align:center;margin:0 0 8px}"]}),e})();function P(e,t){1&e&&a._UZ(0,"iframe",14)}let E=(()=>{class e{constructor(e){this.nodeService=e}ngOnInit(){this.nodeService.getFiles().then(e=>{this.files=[{label:"Root",children:e}]})}}return e.\u0275fac=function(t){return new(t||e)(a.Y36(l.s))},e.\u0275cmp=a.Xpm({type:e,selectors:[["ng-component"]],decls:27,vars:2,consts:[[1,"content-section","introduction"],[1,"feature-intro"],["github","tree","stackblitz","treehorizontal-demo"],[1,"content-section","implementation"],[1,"card"],["layout","horizontal","selectionMode","single",3,"value","selection","selectionChange"],[1,"content-section","documentation"],["header","Source"],["href","https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/tree","target","_blank",1,"btn-viewsource"],["href","https://stackblitz.com/edit/primeng-treehorizontal-demo","target","_blank",1,"btn-viewsource",2,"margin-left",".5em"],["lang","markup"],["lang","typescript"],["header","StackBlitz"],["pTemplate","content"],["src","https://stackblitz.com/edit/primeng-treehorizontal-demo?embed=1",2,"width","100%","height","768px","border","none"]],template:function(e,t){1&e&&(a.TgZ(0,"div",0),a.TgZ(1,"div",1),a.TgZ(2,"h1"),a._uU(3,"Tree "),a.TgZ(4,"span"),a._uU(5,"Horizontal"),a.qZA(),a.qZA(),a.TgZ(6,"p"),a._uU(7,"Horizontal orientation is the alternative layout option."),a.qZA(),a.qZA(),a._UZ(8,"app-demoActions",2),a.qZA(),a.TgZ(9,"div",3),a.TgZ(10,"div",4),a.TgZ(11,"p-tree",5),a.NdJ("selectionChange",function(e){return t.selectedFile=e}),a.qZA(),a.qZA(),a.qZA(),a.TgZ(12,"div",6),a.TgZ(13,"p-tabView"),a.TgZ(14,"p-tabPanel",7),a.TgZ(15,"a",8),a.TgZ(16,"span"),a._uU(17,"View on GitHub"),a.qZA(),a.qZA(),a.TgZ(18,"a",9),a.TgZ(19,"span"),a._uU(20,"Edit in StackBlitz"),a.qZA(),a.qZA(),a.TgZ(21,"app-code",10),a.IAx(),a._uU(22,'\n<p-tree [value]="files" layout="horizontal" selectionMode="single" [(selection)]="selectedFile"></p-tree>\n'),a.fQ9(),a.qZA(),a.TgZ(23,"app-code",11),a.IAx(),a._uU(24,"\nimport {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treehorizontaldemo.html'\n})\nexport class TreeHorizontalDemo implements OnInit {\n\n    files: TreeNode[];\n\n    selectedFile: TreeNode;\n    \n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFiles().then(files => {\n            this.files = [{\n                label: 'Root',\n                children: files\n            }];\n        });\n    }\n}\n"),a.fQ9(),a.qZA(),a.qZA(),a.TgZ(25,"p-tabPanel",12),a.YNc(26,P,1,0,"ng-template",13),a.qZA(),a.qZA(),a.qZA()),2&e&&(a.xp6(11),a.Q6J("value",t.files)("selection",t.selectedFile))},directives:[d.P,s.mp,c.xf,c.x4,Z.h,g.jx],encapsulation:2}),e})(),H=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=a.oAB({type:e}),e.\u0275inj=a.cJS({imports:[[r.Bz.forChild([{path:"",component:T},{path:"templating",component:q},{path:"selection",component:v},{path:"filter",component:S},{path:"lazy",component:N},{path:"scroll",component:M},{path:"contextmenu",component:Q},{path:"dragdrop",component:B},{path:"horizontal",component:E}])],r.Bz]}),e})();var V=n(49781),L=n(35167),J=n(56463),j=n(50514),Y=n(11579),R=n(59202);let W=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=a.oAB({type:e}),e.\u0275inj=a.cJS({imports:[[i.ez,o.u5,H,V.xc,L.EV,J.hJ,j.S,Y.vI,R.LU,Z.a,d.L]]}),e})()}}]);